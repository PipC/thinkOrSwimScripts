//@version=5
strategy("Supertrendx3 VP Strategy v5", shorttitle="ST3Strategy", overlay = true, format=format.price,
     precision       = 4,
     linktoseries    = true,
     max_bars_back   = 1000,
     max_lines_count = 500)

stopLossPrecent=input.float(title="Stop Loss Precentage %", step=0.5, defval=5)
stopBelowHMA55=input.bool(title="Stop Below HMA55", defval=true)
tradeMaxAmount = input.int(title="Trading Amount", step=1000, defval=10000)

Periods_1 = input.int(title="ATR Period 1", defval=10)
Periods_2 = input.int(title="ATR Period 2", defval=11)
Periods_3 = input.int(title="ATR Period 3", defval=12)
src = input(hl2, title="Source")

Multiplier_1 = input.float(title="ATR Multiplier 1", step=0.1, defval=1.0)
Multiplier_2 = input.float(title="ATR Multiplier 2", step=0.1, defval=2.0)
Multiplier_3 = input.float(title="ATR Multiplier 3", step=0.1, defval=3.0)

changeATR= input.bool(title="Change ATR Calculation Method ?", defval=true)
showsignals = input.bool(title="Show Buy/Sell Signals ?", defval=true)
highlighting = input.bool(title="Highlighter On/Off ?", defval=true)

tr = math.max((high - low), math.abs(high - close[1]), math.abs(low - close[1]))

atr2_1 = ta.sma(tr, Periods_1)
atr_1= changeATR ? ta.atr(Periods_1) : atr2_1
up_1=src-(Multiplier_1*atr_1)
up1_1 = nz(up_1[1],up_1)
up_1 := close[1] > up1_1 ? math.max(up_1,up1_1) : up_1
dn_1=src+(Multiplier_1*atr_1)
dn1_1 = nz(dn_1[1], dn_1)
dn_1 := close[1] < dn1_1 ? math.min(dn_1, dn1_1) : dn_1
trend_1 = 1
trend_1 := nz(trend_1[1], trend_1)
trend_1 := trend_1 == -1 and close > dn1_1 ? 1 : trend_1 == 1 and close < up1_1 ? -1 : trend_1

upPlot_1 = plot(trend_1 == 1 ? up_1 : na, title="Up Trend", style=plot.style_linebr, linewidth=0, color=color.rgb(0,100,0))
buySignal_1 = trend_1 == 1 and trend_1[1] == -1
//plotshape(buySignal_1 ? up_1 : na, title="UpTrend Begins", location=location.absolute, style=shape.circle, size=size.tiny, color=color.green)
dnPlot_1 = plot(trend_1 == 1 ? na : dn_1, title="Down Trend", style=plot.style_linebr, linewidth=0, color=color.rgb(100,0,0))
sellSignal_1 = trend_1 == -1 and trend_1[1] == 1
//plotshape(sellSignal_1 ? dn_1 : na, title="DownTrend Begins", location=location.absolute, style=shape.circle, size=size.tiny, color=color.red)
mPlot_1 = plot(ohlc4, title="", style=plot.style_circles, linewidth=0)

atr2_2 = ta.sma(tr, Periods_2)
atr_2= changeATR ? ta.atr(Periods_2) : atr2_2
up_2=src-(Multiplier_2*atr_2)
up1_2 = nz(up_2[1],up_2)
up_2 := close[1] > up1_2 ? math.max(up_2,up1_2) : up_2
dn_2=src+(Multiplier_2*atr_2)
dn1_2 = nz(dn_2[1], dn_2)
dn_2 := close[1] < dn1_2 ? math.min(dn_2, dn1_2) : dn_2
trend_2 = 1
trend_2 := nz(trend_2[1], trend_2)
trend_2 := trend_2 == -1 and close > dn1_2 ? 1 : trend_2 == 1 and close < up1_2 ? -1 : trend_2

upPlot_2 = plot(trend_2 == 1 ? up_2 : na, title="Up Trend", style=plot.style_linebr, linewidth=0, color=color.rgb(0,125,0))
buySignal_2 = trend_2 == 1 and trend_2[1] == -1
//plotshape(buySignal_2 ? up_2 : na, title="UpTrend Begins", location=location.absolute, style=shape.circle, size=size.tiny, color=color.green)
dnPlot_2 = plot(trend_2 == 1 ? na : dn_2, title="Down Trend", style=plot.style_linebr, linewidth=0, color=color.rgb(125,0,0))
sellSignal_2 = trend_2 == -1 and trend_2[1] == 1
//plotshape(sellSignal_2 ? dn_2 : na, title="DownTrend Begins", location=location.absolute, style=shape.circle, size=size.tiny, color=color.red)
mPlot_2 = plot(ohlc4, title="", style=plot.style_circles, linewidth=0)


atr2_3 = ta.sma(tr, Periods_3)
atr_3= changeATR ? ta.atr(Periods_3) : atr2_3
up_3=src-(Multiplier_3*atr_3)
up1_3 = nz(up_3[1],up_3)
up_3 := close[1] > up1_3 ? math.max(up_3,up1_3) : up_3
dn_3=src+(Multiplier_3*atr_3)
dn1_3 = nz(dn_3[1], dn_3)
dn_3 := close[1] < dn1_3 ? math.min(dn_3, dn1_3) : dn_3
trend_3 = 1
trend_3 := nz(trend_3[1], trend_3)
trend_3 := trend_3 == -1 and close > dn1_3 ? 1 : trend_3 == 1 and close < up1_3 ? -1 : trend_3

upPlot_3 = plot(trend_3 == 1 ? up_3 : na, title="Up Trend 3", style=plot.style_linebr, linewidth=0, color=color.rgb(0,150,0))
buySignal_3 = trend_3 == 1 and trend_3[1] == -1
//plotshape(buySignal_3 ? up_3 : na, title="UpTrend Begins", location=location.absolute, style=shape.circle, size=size.tiny, color=color.green)
dnPlot_3 = plot(trend_3 == 1 ? na : dn_3, title="Down Trend", style=plot.style_linebr, linewidth=0, color=color.rgb(150,0,0))
sellSignal_3 = trend_3 == -1 and trend_3[1] == 1
//plotshape(sellSignal_3 ? dn_3 : na, title="DownTrend Begins", location=location.absolute, style=shape.circle, size=size.tiny, color=color.red)
mPlot_3 = plot(ohlc4, title="", style=plot.style_circles, linewidth=0)


var label _laS1 = na
label.delete(_laS1)
if trend_1 > 0
    _laS1 := label.new(x=time+1, y=up_1, text=str.format("{1,number,#.#}% STP ${0,number,#.##}",up_1,(1-up_1/high)*100), xloc=xloc.bar_time, yloc=yloc.price, color=color.rgb(0,100,0), textcolor=color.white, size=size.small, style=label.style_label_lower_left)

var label _laS2 = na
label.delete(_laS2)
if trend_2 > 0
    _laS2 := label.new(x=time+1, y=up_2, text=str.format("{1,number,#.#}% STP ${0,number,#.##}",up_2,(1-up_2/high)*100), xloc=xloc.bar_time, yloc=yloc.price, color=color.rgb(0,125,0), textcolor=color.white, size=size.small, style=label.style_label_left)

var label _laS3 = na
label.delete(_laS3)
if trend_3 > 0
    _laS3 := label.new(x=time+1, y=up_3, text=str.format("{1,number,#.#}% STP ${0,number,#.##}",up_3,(1-up_3/high)*100), xloc=xloc.bar_time, yloc=yloc.price, color=color.rgb(0,150,0), textcolor=color.white, size=size.small, style=label.style_label_upper_left)




//changeCond = trend != trend[1]

//plotshape(buySignal and showsignals ? up : na, title="Buy", text="Buy", location=location.absolute, style=shape.labelup, size=size.tiny, color=color.green, textcolor=color.white, transp=0)
//plotshape(sellSignal and showsignals ? dn : na, title="Sell", text="Sell", location=location.absolute, style=shape.labeldown, size=size.tiny, color=color.red, textcolor=color.white, transp=0)


//emaplot = input (true, title="Show EMA on chart")
//len = input(8, minval=1, title="ema Length")
//sma_src = close
//out = ema(sma_src, len)
//up = out > out[1]
//down = out < out[1]
//mycolor = up ? color.green : down ? color.red : color.blue
//plot(out and emaplot ? out :na, title="EMA", color=mycolor, linewidth=1)

smaplot = input.bool(false, title="Show SMA on chart")
len2 = input.int(8, minval=1, title="sma Length")
sma_src2 = close
// out2 = sma(sma_src2, len2)
// up2 = out2 > out2[1]
// down2 = out2 < out2[1]

// mycolor2 = up2 ? color.green : down2 ? color.red : color.blue
// plot(out2 and smaplot ? out2 :na , title="SMA", color=mycolor2, linewidth=1)

// lenA = input(10, minval=1, title="SMA #A")
// sma_srcA = input(close, title="SMA Source #A")
// outA = sma(sma_srcA, lenA)
// plot(outA, title="SMA #A", color=close >= outA ? color.yellow : color.yellow, linewidth = 1)

// lenB = input(20, minval=1, title="SMA #B")
// sma_srcB = input(close, title="SMA Source #B")
// outB = sma(sma_srcB, lenB)
// plot(outB, title="SMA #B", color=close >= outB ? color.orange : color.orange, linewidth = 1)

// lenC = input(50, minval=1, title="SMA #C")
// sma_srcC = input(close, title="SMA Source #C")
// outC = sma(sma_srcC, lenC)
// plot(outC, title="SMA #C", color=close >= outC ? color.red : color.red, linewidth = 1)

lenH55 = input.int(55, minval=1, title="HMA #H55")

sma_srcH55H = input(high, title="HMA Source #H55 High")
outH55H = ta.hma(sma_srcH55H, lenH55)
plot(outH55H, title="SMA #H55H", color=close >= outH55H ? ( outH55H > outH55H[1] ? color.lime : (close > outH55H ? color.white : color.silver) ) :  color.gray, linewidth = 1)

sma_srcH55L = input(low, title="HMA Source #H55 Low")
outH55L = ta.hma(sma_srcH55L, lenH55)
plot(outH55L, title="SMA #H55L", color=close >= outH55L ? ( outH55L > outH55L[1] ? color.lime : (close > outH55L ? color.white : color.silver) ) :  color.gray, linewidth = 1)

lenA = input.int(5, minval=1, title="SMA #5")
srcA = input(close, title="SMA Source #5")
outA = ta.sma(srcA, lenA)
plot(outA, title="SMA #5", color=outA >= outA[1] ? color.yellow : color.yellow, linewidth = 1)

lenB = input.int(20, minval=1, title="SMA #20")
srcB = input(close, title="SMA Source #20")
outB = ta.sma(srcB, lenB)
plot(outB, title="SMA #20", color=outB >= outB[1] ? color.orange : color.orange, linewidth = 1)


lenD = input.int(100, minval=1, title="EMA #100")
ema_srcD = input(close, title="EMA Source #100")
outD = ta.ema(ema_srcD, lenD)
plot(outD, title="EMA #100", color=outD >= outD[1] ? color.gray : color.maroon, linewidth = 2)

lenE = input.int(200, minval=1, title="EMA #200")
ema_srcE = input(close, title="EMA Source #200")
outE = ta.ema(ema_srcE, lenE)
plot(outE, title="EMA #200", color=outE >= outE[1] ? color.white : color.fuchsia, linewidth = 3)

STBuySignal = (trend_1 > 0 and trend_2 > 0 and trend_3 > 0) and (buySignal_1 or buySignal_2 or buySignal_3)
STSellSignal = (trend_1 < 0 and trend_2 < 0 and trend_3 < 0) and (sellSignal_1 or sellSignal_2 or sellSignal_3)

plotshape( STBuySignal  ? up_3 : na, title="UpTrend Begins",   location=location.absolute, style=shape.triangleup,   size=size.tiny, color=color.green)
plotshape( STSellSignal ? dn_3 : na, title="DownTrend Begins", location=location.absolute, style=shape.triangledown, size=size.tiny, color=color.red)


if STBuySignal
    var label _laBUY = na
    //label.delete(_laBUY)
    if close > high[1]+syminfo.mintick
        _laBUY := label.new(x=time, y=up_3, text=str.format("{1,number,#.#}%",up_3,(1-up_3/high)*100), xloc=xloc.bar_time, yloc=yloc.price, color=color.new(color.green,80), textcolor=color.green, size=size.small, style=label.style_label_upper_left)


if STSellSignal
    var label _laSELL = na
    //label.delete(_laSELL)
    if close < low[1]-syminfo.mintick
        _laSELL := label.new(x=time, y=dn_3, text=str.format("{1,number,#.#}%",dn_3,(1-dn_3/low)*100), xloc=xloc.bar_time, yloc=yloc.price, color=color.new(color.red,80), textcolor=color.red, size=size.small, style=label.style_label_lower_left)


bgColor = (trend_1 > 0 and trend_2 > 0 and trend_3 > 0)  and close > outE and close > outH55L ? color.new(color.lime,95) : color.new(color.red,95)
bgcolor(bgColor)

var _recentHigh = high
if _recentHigh < high
    _recentHigh := high

var _recentLow = low
if _recentLow > low
    _recentLow := low

//BACKTEST ORDER ENTRY
//alertcondition((trend_1 > 0 and trend_2 > 0 and trend_3 > 0) and (buySignal_1 or buySignal_2 or buySignal_3) and close > outE, "SuperTrend Change Up", "SuperTrend Change Up")
//alertcondition((trend_1 < 0 and trend_2 < 0 and trend_3 < 0) and (sellSignal_1 or sellSignal_2 or sellSignal_3), "SuperTrend Change Down", "SuperTrend Change Down")

//if ((buySignal_1 or buySignal_2 or buySignal_3) or ((trend_1 > 0 and trend_2 > 0 and trend_3 > 0) and close > outH55H)) and (strategy.opentrades == 0)
//if ( strategy.opentrades == 0 and STBuySignal)
//if ( strategy.opentrades == 0) or true
if (STBuySignal) and (strategy.opentrades == 0) and (not stopBelowHMA55 or (stopBelowHMA55 and  close > outH55H ))
    //strategy.entry("B1", strategy.long, comment="B1", stop= high + syminfo.mintick, qty=tradeMaxAmount/high)
    strategy.entry("LE", direction=strategy.long, comment="LE", stop=high, qty=tradeMaxAmount/(high+syminfo.mintick)) //*(100-initStopLossPrecent)/100, qty=tradeMaxAmount/high)


if (STBuySignal) and (strategy.position_size > 0) //or (trend_1 > 0 and trend_2 > 0 and trend_3 > 0)
    strategy.order("LC", direction=strategy.short, qty=strategy.position_size, when=low < strategy.position_avg_price *(100-stopLossPrecent)/100)


if (sellSignal_2 or sellSignal_3) and (strategy.position_size > 0)
    //strategy.cancel_all()
    //strategy.order("LX", direction=strategy.short, qty=strategy.position_size, comment="LX", when=close < math.max(dn_1, dn_2, dn_3))
    strategy.order("LS", direction=strategy.short, qty=strategy.position_size, when=low < _recentHigh*(100-stopLossPrecent)/100)


if (STSellSignal) and (strategy.position_size > 0) // or ((recentHigh - close) / recentHigh) > longStopLossPrecent/100
    strategy.exit("XX", stop=low)

if stopBelowHMA55 and ( close < outH55L) and (strategy.position_size > 0) // or ((recentHigh - close) / recentHigh) > longStopLossPrecent/100
    strategy.exit("X55L", stop=outH55L)

// if STSellSignal
//     //strategy.exit("X2", stop=low, comment="X2")
//     strategy.close_all(comment="X1")
// else
//     if ((sellSignal_1 or sellSignal_2 or sellSignal_3) or close < outH55L) and ((recentHigh - close) / recentHigh) > stopLossPrecent/100
//         strategy.exit("X2", stop=recentHigh*(100-stopLossPrecent)/100, comment="X2")
//     else
//         strategy.exit("X3", stop=recentHigh*(100-stopLossPrecent)/100, comment="X3") // Set a TP at the high of the signal candle.
//    else
    //    strategy.cancel_all()
//        strategy.exit("S1", stop=highest(source=high, length=10)*(100-longStopLossPrecent)/100, comment="S1") // Set a TP at the high of the signal candle.

//if ((sellSignal_1 or sellSignal_2 or sellSignal_3) or ((trend_1 < 0 and trend_2 < 0 and trend_3 < 0) and close < outH55L))  and (strategy.opentrades == 0)
//	strategy.entry("SE", strategy.short, comment="SE", stop=low - syminfo.mintick)
//	strategy.exit("SX", stop=low*1.03, comment="SX") // Set a TP at the high of the signal candle.

//if (strategy.opentrades > 0) and (buySignal_1 or buySignal_2 or buySignal_3 or close > outH55H)
//    strategy.exit("SX", stop=high, comment="SX")


///////////////////////////////////////////////////////////////////////////////////////////////////
//// INPUTS
///////////////////////////////////////////////////////////////////////////////////////////////////
vp_lookback   = input.int(defval = 200,
                     title   = "Volume Lookback Depth [10-1000]",
                     minval  = 10,
                     maxval  = 1000)

vp_max_bars   = input.int(defval = 500,
                     title   = "Number of Bars [10-500]",
                     minval  = 10,
                     maxval  = 500)

vp_bar_mult   = input.int(defval = 50,
                     title   = "Bar Length Multiplier [10-100]",
                     minval  = 10,
                     maxval  = 100)

vp_bar_offset = input.int(defval = 50,
                     title   = "Bar Horizontal Offset [0-100]",
                     minval  = 0,
                     maxval  = 100)

vp_bar_width  = input.int(defval = 2,
                     title   = "Bar Width [1-20]",
                     minval  = 1,
                     maxval  = 20)

// As suggested by @NXT2017
vp_delta_type = input.string(defval = "Both",
                     title   = "Delta Type",
                     options = ['Both', 'Bullish', 'Bearish'])

vp_poc_show   = input.bool(defval = true,
                     title   = "Show POC Line")

vp_bar_color  = input.color(defval = color.new(color.gray, 80) ,
                     title   = "Bar Color")

vp_poc_color  = input.color(defval = color.new(color.white, 30),
                     title   = "POC Color")


///////////////////////////////////////////////////////////////////////////////////////////////////
//// VARIABLES
///////////////////////////////////////////////////////////////////////////////////////////////////
float vp_Vmax = 0.0
int vp_VmaxId = 0
int vp_N_BARS = vp_max_bars

var int vp_first = time

vp_a_P = array.new_float((vp_N_BARS + 1), 0.0)
vp_a_V = array.new_float(vp_N_BARS, 0.0)
vp_a_D = array.new_float(vp_N_BARS, 0.0)
vp_a_W = array.new_int(vp_N_BARS, 0)

///////////////////////////////////////////////////////////////////////////////////////////////////
//// CALCULATIONS
///////////////////////////////////////////////////////////////////////////////////////////////////
float vp_HH = ta.highest(high, vp_lookback)
float vp_LL = ta.lowest(low, vp_lookback)

if barstate.islast
	float vp_HL = (vp_HH - vp_LL) / vp_N_BARS
    for j = 1 to (vp_N_BARS + 1)
        array.set(vp_a_P, (j-1), (vp_LL + vp_HL * j))
	for i = 0 to (vp_lookback - 1)
		int Dc = 0
		array.fill(vp_a_D, 0.0)
		for j = 0 to (vp_N_BARS - 1)
			float Pj = array.get(vp_a_P, j)
			if low[i] < Pj and high[i] > Pj and (vp_delta_type == "Bullish" ?
			 close[i] >= open[i] : (vp_delta_type == "Bearish" ? close[i] <= open[i] : true))
				float Dj = array.get(vp_a_D, j)
				float dDj = Dj + nz(volume[i])
				array.set(vp_a_D, j, dDj)
				Dc := Dc + 1
		for j = 0 to (vp_N_BARS - 1)
			float Vj = array.get(vp_a_V, j)
			float Dj = array.get(vp_a_D, j)
			float dVj = Vj + ((Dc > 0) ? (Dj / Dc) : 0.0)
			array.set(vp_a_V, j, dVj)
	vp_Vmax := array.max(vp_a_V)
    vp_VmaxId := array.indexof(vp_a_V, vp_Vmax)
    for j = 0 to (vp_N_BARS - 1)
        float Vj = array.get(vp_a_V, j)
        int Aj = math.round(vp_bar_mult * Vj / vp_Vmax)
        array.set(vp_a_W, j, Aj)

///////////////////////////////////////////////////////////////////////////////////////////////////
//// PLOTING
///////////////////////////////////////////////////////////////////////////////////////////////////
if barstate.isfirst
    vp_first := time
vp_change = ta.change(time)
vp_x_loc = timenow + math.round(vp_change * vp_bar_offset)

f_setup_bar(n) =>
    x1 = ((vp_VmaxId == n) and vp_poc_show) ? math.max(time[vp_lookback], vp_first) :
		 (math.round(vp_change * (vp_bar_offset - array.get(vp_a_W, n))) + timenow)
	ys = array.get(vp_a_P, n)
    line.new(x1     = x1,
             y1     = ys,
             x2     = vp_x_loc,
             y2     = ys,
             xloc   = xloc.bar_time,
             extend = extend.none,
             color  = (vp_VmaxId == n ? vp_poc_color : vp_bar_color),
             style  = line.style_solid,
             width  = vp_bar_width)

if barstate.islast
    for i = 0 to (vp_N_BARS - 1) by 1
        f_setup_bar(i)

///////////////////////////////////////////////////////////////////////////////////////////////////
//// END
///////////////////////////////////////////////////////////////////////////////////////////////////


// User Options
vwapLookbackDays = input.int(title="VWAP Anchor Lookback (days)",  defval=55)

// Functions
getTotalLookbackDays(lookbackWeekdays) =>
    // Calculate actual lookback days from weekdays
    int lookbackDays = lookbackWeekdays
    int currentWeekday = dayofweek(timenow)-1
    if (lookbackWeekdays > currentWeekday)
        int weekdaysEachWeek = 5
        int weekendDaysEachWeek = 2
        int weekendsToOffset = math.ceil((lookbackWeekdays - currentWeekday) / weekdaysEachWeek)
        int offsetWeekendDays = weekendDaysEachWeek * weekendsToOffset
        lookbackDays := offsetWeekendDays + lookbackWeekdays
    lookbackDays
isNewPeriod(res) =>
    // Helper function for finding new bars/periods by resolution
    t = time(res)
    newbar = not na(t) and (na(t[1]) or t > t[1])

// Calculate beginning and ending range for VWAP
int lookback = getTotalLookbackDays(vwapLookbackDays)
milliseconds_in_lookback_days = 1000 * 60 * 60 * 24 * lookback
leftborder = timenow - time < milliseconds_in_lookback_days
rightborder = barstate.islast

// VWAP Variables
float cumulativePV = na
float cumulativeVOL = na
float multiDayVWAP = na
bool newDay = isNewPeriod("D")
var startedNewPeriod = false
bool insideLookbackRange = (leftborder and not rightborder) or rightborder

// Start plotting new VWAP period if it's a new day, inside our lookback range, and only if we haven't already started a new period
bool startNewPeriod = newDay and insideLookbackRange and not startedNewPeriod
if (startNewPeriod)
    startedNewPeriod := true

// Calculate cumulative totals & VWAP as documented below
// VWAP Docs: https://www.investopedia.com/terms/v/vwap.asp
cumulativePV := startNewPeriod ? (hlc3 * volume) : (cumulativePV[1] + hlc3 * volume)
cumulativeVOL := startNewPeriod ? volume : (cumulativeVOL[1] + volume)
multiDayVWAP := (cumulativePV / cumulativeVOL)

// Plots
plot(insideLookbackRange ? multiDayVWAP : na, title="VWAP (RM)", color=color.new(#ffffff,30), linewidth=1, style=plot.style_stepline)

// Debug
//bgcolor(startedNewPeriod and insideLookbackRange ? #42a5f5 : na, transp=95)

if (stopBelowHMA55)
    var trend = false
    trend := trend_1 > 0 and trend_2 > 0 and trend_3 > 0
    var label _la55STP = na
    label.delete(_la55STP)
    _la55STP := label.new(x=time+1, y=(trend?outH55L:outH55H), text=str.format("{1,number,#.#}% H55STP ${0,number,#.##}",(trend?outH55L:outH55H), 100*(1-(trend?outH55L:outH55H)/close)), xloc=xloc.bar_time, yloc=yloc.price, color=color.new(color.yellow, 20), textcolor=color.black, size=size.small, style=label.style_label_left)


var label _laSTP = na
label.delete(_laSTP)
_laSTP := label.new(x=time+1, y=close*(1-stopLossPrecent/100), text=str.format("{0,number,#.#}% STP ${1,number,#.##}",stopLossPrecent,close*(1-stopLossPrecent/100)), xloc=xloc.bar_time, yloc=yloc.price, color=color.new(color.fuchsia,30), textcolor=color.white, size=size.small, style=label.style_label_left)


