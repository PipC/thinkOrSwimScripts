// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// c dgtrd

// Moving Average, calculated using Momentum, Acceleration and Probability (Psychological Effect)
//
// Feedback Bands, calculated by applying feedback consept common in Electronics Engineering
//
//@version=5
strategy(title="Momentum adjusted Moving Average by DGT", shorttitle="MaMA by DGT", overlay=true)

// -Input ======================================================================================= //

stopLossPrecent=input.float(title="Stop Loss Precentage %", step=0.5, defval=5)
stopBelowHMA55=input.bool(title="Stop Below HMA55", defval=true)
tradeMaxAmount = input.int(title="Trading Amount", step=1000, defval=10000)

source      = input(close, "Source")
length      = input.int(55,    "Moving Average Length", minval = 1)
exponential = input.bool(true)
mLength     = input.int(34,    "Momentum Length"      , minval = 0)
accelFactor = input.bool(true,  "Acceleration Factor")
pLength     = input.int(13,    "Probability Length"   , minval = 1)
offset      = input.int(1,     "Offset"               , minval =-5, maxval = 5)

displayFB   = input.bool(false, "Display Feedback Bands (Daily TimeFrame)")
fbFactor    = input.float(.1,    "Feedback Factor"      , minval = 0, maxval =.2, step = .01)
displayMA   = input.bool(false, "Add Regular Moving Average")

// -Calculation ================================================================================= //

momentum       = ta.change(source  , mLength)
acceleration   = ta.change(momentum, mLength)
probability    = math.sum(ta.change(source) > 0 ? 1 : 0, pLength) / pLength

adjustedSource = accelFactor ?
     source + (momentum + .5 * acceleration) * probability :
     source +  momentum * probability

MaMA = exponential ? ta.ema(adjustedSource,length) : ta.sma(adjustedSource,length)
MA   = displayMA   ? exponential ? ta.ema(source,length) : ta.sma(source,length) : na

negative = displayFB and timeframe.isdaily ? ta.ema(MaMA / math.abs(1 + fbFactor * adjustedSource / MaMA), 5) : na
positive = displayFB and timeframe.isdaily ? ta.ema(MaMA / math.abs(1 - fbFactor * adjustedSource / MaMA), 5) : na

// -Plot ======================================================================================== //

p0 = plot(MaMA,      "Momentum adjusted Moving Average", color = (source > MaMA ? #006400 : #910000), offset=offset)
p1 = plot(negative,  "MaMA - Negative Feedback Effect" , color = #910000, offset=offset)
p2 = plot(positive,  "MaMA - Positive Feedback Effect" , color = #006400, offset=offset)
fill(p0, p1, title = "Lower MaMA Band", transp = 95    , color = #910000)
fill(p0, p2, title = "Upper MaMA Band", transp = 95    , color = #006400)

plot(MA,             "Regular Moving Average")

alarm = ta.cross(source, MaMA)
alertcondition(barstate.islast ? alarm[1] : alarm, title="Trading Opportunity", message="MaMA - Probable Trade Opportunity\n{{exchange}}:{{ticker}}->\nPrice = {{close}},\nTime = {{time}}")

// backtest calculations

isBackTest   = input(true,  "שששששששששששששששששש שש Backtest On/Off שש שששששששששששששששששש")

dasCapital   = input.float(10000, "initial capital")
stopLoss     = input.float(1.,    "Stop Loss %", step=.1) / 100
lenBckTst    = input.float(1,     "Backtest Period (Year)", step = .25)
srcInOut     = input(close,  "Source : Entry/Exit Price Assumption")
lblInOutSL   = input(true,  "Show Entry/Take Profit(Exit)/Stop Loss Labels")

startBckTst  = time > timenow - lenBckTst * 31556952000

var inTrade    = false
var entryPrice = 0.
var exitPrice  = 0.

if isBackTest

    var capital    = dasCapital
    var trades     = 0
    var win        = 0
    var loss       = 0

    crossover      = ta.crossover (source, MaMA)
    crossunder     = ta.crossunder(source, MaMA)

    longCondition  = barstate.islast ? crossover [1] : crossover
    shortCondition = barstate.islast ? crossunder[1] : crossunder

    stopLossCondition = inTrade ? close < entryPrice * (1 - stopLoss) : 0

    if startBckTst and longCondition and not inTrade
        entryPrice := srcInOut
        inTrade    := true
        trades     := trades + 1

        if lblInOutSL
            label longLabel = label.new(bar_index, low, text="LE"
             ,tooltip="entry price  : " + str.tostring(entryPrice) + "\nentry value : " + str.tostring(capital, "#.##")
             ,color=color.new(color.green,50), style=label.style_label_up, textcolor=color.white, textalign=text.align_center, size=size.tiny)
            strategy.entry("LE", direction=strategy.long, comment="LE", stop=high+syminfo.mintick, qty=tradeMaxAmount/(high)) //*(100-initStopLossPrecent)/100, qty=tradeMaxAmount/high)

    if (shortCondition or stopLossCondition) and inTrade
        //exitPrice  := stopLossCondition ? entryPrice * (1 - stopLoss)  : srcInOut
        exitPrice  := srcInOut
        inTrade    := false
        capital    := capital * (exitPrice / entryPrice)

        if exitPrice > entryPrice
            win    := win  + 1
        else
            loss   := loss + 1

        if lblInOutSL
            txt = stopLossCondition ? "XX" : "TP"
            label shortLabel = label.new(bar_index, high, text=txt
                 ,tooltip="change .......... : " + str.tostring((exitPrice / entryPrice - 1) * 100, "#.##") + "%\nentry/exit price : " + str.tostring(entryPrice) + " / " + str.tostring(exitPrice) + "\nnew capital ..... : " + str.tostring(capital, "#.##")
                 ,color=color.new(color.red,50), style=label.style_label_down, textcolor=color.white, textalign=text.align_center, size=size.tiny)
            strategy.exit("LX", stop=low)

    var years    = (timenow - time) / 31556952000

    var yearsTxt = ""
    var remarks  = ""

    if years < lenBckTst
        lenBckTst := years
        yearsTxt  := str.tostring(lenBckTst, "#.##") + " Years***"
        remarks   := "\n\n*   trade statistics for longs entries only\n**  final value, if trade active displays estimated final value\n*** max available data for selected timeframe : # of bars - " + str.tostring(bar_index)
    else
        yearsTxt  := str.tostring(lenBckTst, "#.##") + " Year(s)"
        remarks   := "\n\n*   trade statistics for longs entries only\n**  final value, if trade open displies estimated final value"

    inTradeTxt = inTrade ? "inTrade" : "not inTrade"
    estimated  = inTrade ? capital * (close / entryPrice) : capital
    entryTxt   = inTrade ? str.tostring(entryPrice) : "not inTrade"
    lastTrdTxt = inTrade ? ", Gain/Loss " + str.tostring((estimated/capital - 1) * 100, "#.##") + "%, Stop Loss " + str.tostring(entryPrice * (1 - stopLoss)) : ""

    tooltipTxt = "entires/exit caclulations\n" +
      "-long entry, when price action cross above MaMA\n" +
      "-take profit, when price action cross under MaMA\n" +
      "-stop loss if last value falls by " + str.tostring(stopLoss * 100) + "% of entry price" + remarks


    label indiLabel = label.new(time, close
         ,text="?? Trade Statistics*, Trade Period - " + yearsTxt +
          "\nשששששששששששששששששששששששששששששששששששששששששששששששששששששששששששששששששששששששששש" +
          "\nSuccess Ratio ...... : " + str.tostring((win/trades)*100, "#") + "%" + ", # of Trades - " + str.tostring(trades) + ", Win/Loss - " + str.tostring(win) + "/" + str.tostring(loss) +
          "\nGain/Loss % ........ : " + str.tostring((estimated/dasCapital - 1) * 100, "#") + "%" + ", Initial/Final Value** - " + str.tostring(dasCapital) + " / " + str.tostring(estimated, "#") +
          "\n\nCurrent TradeStatus - " + inTradeTxt + lastTrdTxt +
          "\nשששששששששששששששששששששששששששששששששששששששששששששששששששששששששששששששששששששששששש" +
          "\nEntry Price/Value . : " + entryTxt + " / " + str.tostring(capital, "#.##") + " " + inTradeTxt +
          "\nLast Price/Value ... : " + str.tostring(close) + " / " + str.tostring(estimated , "#.##") + " " + inTradeTxt
         ,tooltip=tooltipTxt
         ,color=color.new( inTrade ? estimated/dasCapital > 1 ? color.teal : color.maroon : color.gray, 20), xloc=xloc.bar_time, style=label.style_label_left, textcolor=color.white, textalign=text.align_left)

    label.set_x(indiLabel, label.get_x(indiLabel) + math.round(ta.change(time)*3))
    label.delete(indiLabel[1])

bgcolor(startBckTst and startBckTst != startBckTst[1] ? color.blue : na, title="Bacttest Starting Bar")
plot(inTrade ? entryPrice : exitPrice > 0 ? exitPrice : na, title="Entry/Exit Price Line", color=inTrade ? color.green : color.red, style = plot.style_circles)

bgColor = source > MaMA ? color.new(color.lime,95) : color.new(color.red,95)
bgcolor(bgColor)

//Order Entry

//if ( strategy.opentrades == 0) or true
//if startBckTst and longCondition and not inTrade and lblInOutSL
    //strategy.entry("B1", strategy.long, comment="B1", stop= high + syminfo.mintick, qty=tradeMaxAmount/high)
//    strategy.entry("LE", direction=strategy.long, comment="LE", stop=high+syminfo.mintick, qty=tradeMaxAmount/(high)) //*(100-initStopLossPrecent)/100, qty=tradeMaxAmount/high)

//if lblInOutSL and (strategy.position_size > 0) //or (trend_1 > 0 and trend_2 > 0 and trend_3 > 0)
//    strategy.order("LC", direction=strategy.short, qty=strategy.position_size, when=low < strategy.position_avg_price *(100-stopLossPrecent)/100)

//if (shortCondition or stopLossCondition) and inTrade and lblInOutSL
//    strategy.exit("LX", stop=low)
//    var label _laSELL = na
//    label.delete(_laSELL)
//    _laSELL := label.new(x=time, y=xATRTrailingStop, text=str.format("${0,number,#.#} ~ {1,number,#.##}%",xATRTrailingStop, 100*(1-xATRTrailingStop/high)), xloc=xloc.bar_time, yloc=yloc.price, color=color.new(color.red,80), textcolor=color.red, size=size.small, style=label.style_label_lower_left)

//if stopBelowHMA55 and ( close < outH55L)  // or ((recentHigh - close) / recentHigh) > longStopLossPrecent/100
//    strategy.exit("X55L", stop=outH55L)




